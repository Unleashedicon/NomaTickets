// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// -----------------------------
// NextAuth.js core models
// -----------------------------

model User {
  id       String   @id @default(cuid())
  email    String   @unique
  name     String?
  password String
  role     UserRole @default(VIEWER)

  // NextAuth relations
  emailVerified  DateTime?
  image          String?
  accounts       Account[]
  sessions       Session[]
  Authenticators Authenticator[]

  // App-specific relations
  createdEvents Event[]  @relation("CreatedEvents")
  tickets       Ticket[] @relation("UserTickets")

  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @default(now()) @updatedAt // ðŸ‘ˆ FIXED
  bookmarkedEvents BookmarkedEvent[]
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

// -----------------------------
// App-specific models
// -----------------------------

enum UserRole {
  VIEWER
  CREATOR
  ADMIN
}

model Event {
  id               String            @id @default(cuid())
  title            String
  description      String
  location         String
  startDate        DateTime
  endDate          DateTime?
  imageUrl         String
  category         String
  status           EventStatus       @default(PENDING)
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  bookmarkedEvents BookmarkedEvent[]
  creator          User              @relation("CreatedEvents", fields: [creatorId], references: [id])
  creatorId        String

  ticketClasses TicketClass[]
  tickets       Ticket[]

  latitude  Float?
  longitude Float?
}

enum EventStatus {
  PENDING
  APPROVED
  REJECTED
}

model TicketClass {
  id        String   @id @default(cuid())
  name      String // e.g., "VIP", "General"
  currency  String?
  price     Float
  quantity  Int
  event     Event    @relation(fields: [eventId], references: [id])
  eventId   String
  createdAt DateTime @default(now())

  tickets Ticket[]
}

model Ticket {
  id            String       @id @default(cuid())
  user          User         @relation("UserTickets", fields: [userId], references: [id])
  userId        String
  event         Event        @relation(fields: [eventId], references: [id])
  eventId       String
  ticketClass   TicketClass  @relation(fields: [ticketClassId], references: [id])
  ticketClassId String
  status        TicketStatus @default(RESERVED)
  createdAt     DateTime     @default(now())
}

enum TicketStatus {
  RESERVED
  PAID
  CANCELLED
}

model BookmarkedEvent {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  event     Event    @relation(fields: [eventId], references: [id])
  eventId   String
  createdAt DateTime @default(now())

  @@unique([userId, eventId]) // prevent duplicate bookmarks
}
